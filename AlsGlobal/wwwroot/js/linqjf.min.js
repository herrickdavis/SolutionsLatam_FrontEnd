const isEquals=function(r,e){if("object"==typeof r&&"object"==typeof e){var t=Object.getOwnPropertyNames(r),n=Object.getOwnPropertyNames(e);if(t.length!==n.length)return!1;for(var o=0;o<t.length;o++){var s=t[o];if(r[s]!==e[s])return!1}return!0}return!1};Array.prototype.groupBy=function(r){if("function"!=typeof r)throw Error("La expression debe ser función flecha",10);var e=[];return this.forEach(t=>{var n={Key:r(t),Value:[t]};"object"==typeof n.Key?e.any(r=>isEquals(r.Key,n.Key))?e.firstOrDefault(r=>isEquals(r.Key,n.Key)).Value.push(t):e.push(n):e.any(r=>r.Key===n.Key)?e.firstOrDefault(r=>r.Key===n.Key).Value.push(t):e.push(n)}),e},Array.prototype.any=function(r){var e=!1;if("function"!=typeof r)throw Error("La expression debe ser función flecha",10);return this.forEach(t=>{e=e||r(t)}),e},Array.prototype.where=function(r){var e=[];if("function"!=typeof r)throw Error("La expression debe ser función flecha",10);return this.forEach(t=>{r(t)&&e.push(t)}),e},Array.prototype.first=function(){var r=this||[];if(0===r.length)throw Error("No se encontro registros en la lista",20);return r[0]},Array.prototype.firstOrDefault=function(r){var e=this||[];return null!=r&&(e=e.where(r)),0===e.length?null:e[0]},Array.prototype.last=function(){var r=this||[];if(0===r.length)throw Error("No se encontro registros en la lista",20);return r[r.length-1]},Array.prototype.lastOrDefault=function(r){var e=this||[];return null!=r&&(e=e.where(r)),0===e.length?null:e[e.length-1]},Array.prototype.orderBy=function(r){var e=Object.assign([],this);const t=function(r,e){if(r.length>=2){for(var n=[],o=[],s=parseInt(r.length/2),i=r[s],f=0;f<r.length;f++)f!==s&&(e(r[f])<e(i)?n.push(r[f]):o.push(r[f]));return n.length<o.length?n.push(i):o.push(i),t(n,e).concat(t(o,e))}return r};return t(e,r)},Array.prototype.orderByDescending=function(r){var e=Object.assign([],this);const t=function(r,e){if(r.length>=2){for(var n=[],o=[],s=parseInt(r.length/2),i=r[s],f=0;f<r.length;f++)f!==s&&(e(r[f])<e(i)?n.push(r[f]):o.push(r[f]));return n.length<o.length?n.push(i):o.push(i),t(o,e).concat(t(n,e))}return r};return t(e,r)},Array.prototype.max=function(r){if("function"!=typeof r)throw Error("La expression debe ser función flecha",10);return this.forEach(e=>{if("number"!=typeof r(e))throw Error("La expression debe ser función flecha",10)}),this.sortBy(r).last()},Array.prototype.min=function(r){if("function"!=typeof r)throw Error("La expression debe ser función flecha",10);return this.forEach(e=>{if("number"!=typeof r(e))throw Error("La expression debe ser función flecha",10)}),this.sortByDescending(r).last()},Array.prototype.select=function(r){if("function"!=typeof r)throw Error("La expression debe ser función flecha",10);var e=[];return this.forEach(t=>e.push(r(t))),e},Array.prototype.all=function(r){if("function"!=typeof r)throw Error("La expression debe ser función flecha",10);var e=!0;return this.forEach(t=>e=!!e&&r(t)),e},Array.prototype.sum=function(r){if("function"!=typeof r)throw Error("La expression debe ser función flecha",10);var e=0;return this.forEach(t=>{if("number"!=typeof r(t))throw Error("Solo se aceptan expresiones Number",10);e+=parseFloat(r(t))}),e},Array.prototype.count=function(r){if(void 0!==r&&"function"!=typeof r)throw Error("La expression debe ser función flecha",10);return void 0!==r?this.where(r).length:this.length},Array.prototype.average=function(r){if("function"!=typeof r)throw Error("La expression debe ser función flecha",10);return this.sum(r)/this.count()};